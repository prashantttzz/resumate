generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  githubUsername       String?
  name                 String?
  password             String?
  isPremium            Boolean       @default(false)
  subscriptionId       String?
  lastSubscriptionDate DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  coverLetter          CoverLetter[]
  resumes              Resume[]
  githubProfile         GitHubProfile?
}

model GitHubProfile {
  id           String          @id @default(uuid())
  userId       String          @unique
  username     String
  personalInfo PersonalInfo?   @relation("GitHubPersonalInfo")
  projects     Projects[]      @relation("GitHubProjects")
  skills       SkillCategory[] @relation("GitHubSkills")
  lastFetched  DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id])
}

model Resume {
  id             String          @id @default(uuid())
  userId         String
  title          String
  template       String          @default("modern")
  views          Int             @default(0)
  downloads      Int             @default(0)
  shares         Int             @default(0)
  slug           String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customSections CustomSection[]
  education      Education[]
  experiences    Experience[]
  personalInfo   PersonalInfo?
  projects       Projects[]
  user           User            @relation(fields: [userId], references: [id])
  skills         SkillCategory[]
  sectionOrder   sectionOrder[]
}

model CoverLetter {
  id            String   @id @default(uuid())
  title         String
  userId        String
  fullName      String
  email         String
  content       String
  phone         String
  companyName   String
  jobTitle      String
  hiringManager String
  preferences   String
  template      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model PersonalInfo {
  id               String        @id @default(uuid())
  resumeId         String?       @unique
  githubProfileId  String?       @unique
  fullName         String
  email            String
  phone            String
  address          String?
  linkedin         String?
  github           String?
  website          String?
  summary          String
  jobTitle         String
  resume           Resume?       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  githubProfile    GitHubProfile? @relation("GitHubPersonalInfo", fields: [githubProfileId], references: [id])
}

model Experience {
  id          String    @id @default(uuid())
  resumeId    String
  company     String
  position    String
  startDate   DateTime
  current     Boolean   @default(false)
  endDate     DateTime?
  location    String?
  description String?
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Projects {
  id               String        @id @default(uuid())
  resumeId         String?
  githubProfileId  String?
  title            String
  role             String?
  startDate        DateTime
  current          Boolean       @default(false)
  endDate          DateTime?
  link             String?
  description      String
  resume           Resume?       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  githubProfile    GitHubProfile? @relation("GitHubProjects", fields: [githubProfileId], references: [id])
}


model Education {
  id          String    @id @default(uuid())
  resumeId    String
  institution String
  degree      String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  current     Boolean   @default(false)
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model SkillCategory {
  id               String        @id @default(uuid())
  resumeId         String?
  githubProfileId  String?
  name             String
  resume           Resume?       @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  skills           Skills[]
  githubProfile    GitHubProfile? @relation("GitHubSkills", fields: [githubProfileId], references: [id])
}

model Skills {
  id      String        @id @default(uuid())
  skillId String
  name    String
  skills  SkillCategory @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model CustomSection {
  id        String        @id @default(uuid())
  resumeId  String
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  entries   CustomEntry[] @relation("SectionEntries")
  resume    Resume        @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model CustomEntry {
  id          String        @id @default(uuid())
  sectionId   String
  title       String?
  description String?
  date        String?
  link        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  section     CustomSection @relation("SectionEntries", fields: [sectionId], references: [id], onDelete: Cascade)
}

model sectionOrder {
  id       String  @id @default(uuid())
  title    String
  resumeId String
  type     String
  order    Int
  isActive Boolean @default(true)
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}
